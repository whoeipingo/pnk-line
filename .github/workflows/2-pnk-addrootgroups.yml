name: Add Root Groups

on:
  workflow_call:
    inputs:
      Subscription_Id:
        required: true
        type: string
      CustomerId:
        required: true
        type: string
      CustomerFullName:
        required: true
        type: string
      Location:
        required: true
        type: string
      az_powershell_min_version:
        required: true
        type: string

jobs:
  add-rootgroups:
    runs-on: ubuntu-latest
    
    env:
      az_powershell_min_version: ${{ inputs.az_powershell_min_version }}
      az_rootadmin_group_uaa: 'IAM-UM-AZ-Root_Admin_Access-UserAccessAdministrator-P'
      az_rootadmin_group_owner: 'IAM-UM-AZ-Root_Admin_Access-Owner-P'
      
    permissions:
      id-token: write
      contents: read

    steps:
      - uses: actions/checkout@v3

      - uses: azure/login@v1
        name: Azure OIDC login
        with:         
          tenant-id: ${{ secrets.TENANT_ID }}
          client-id: ${{ secrets.CLIENT_ID }}
          subscription-id: ${{ inputs.Subscription_Id }}
          enable-AzPSSession: true
        
      - shell: pwsh
        name: Ensure correct Az module is installed
        run: |
          if (Get-Module Az -ListAvailable | Where-Object { $_.Version -eq $env:az_powershell_min_version }) {
            Write-Host "Az module version $env:az_powershell_min_version is already installed"
            Import-Module Az -MinimumVersion $env:az_powershell_min_version
          }
          else {
              Write-Host "Az module version $env:az_powershell_min_version is going to be installed"
              Install-Module -Name Az -AllowClobber -Force -Scope CurrentUser -Repository PSGallery -MinimumVersion $env:az_powershell_min_version
          }        
          
      - shell: pwsh
        name: 'Add Owner and User Administrator Root admin group to MG Root'
        id: rootgroups
        run: |
          
            ./modules/rbac/rbac-mg-root.ps1
  
      - shell: pwsh
        name: Reading environment variables
        run: |
          Get-ChildItem env: | fl
    
          echo '${{ steps.rootgroups.outputs.rootid }}'
          echo '${{ steps.rootgroups.outputs.grapjas }}'
         
